[
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "VGG16",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "ResNet50",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNet",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNetV2",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "InceptionV3",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "Xception",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "DenseNet169",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "VGG16",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "ResNet50",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNet",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNetV2",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "InceptionV3",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "Xception",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "DenseNet169",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "VGG16",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "ResNet50",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNet",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNetV2",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "InceptionV3",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "Xception",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "DenseNet169",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "VGG16",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "ResNet50",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNet",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNetV2",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "InceptionV3",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "Xception",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "DenseNet169",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "VGG16",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "ResNet50",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNet",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "MobileNetV2",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "InceptionV3",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "Xception",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "DenseNet169",
        "importPath": "keras.applications",
        "description": "keras.applications",
        "isExtraImport": true,
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.vgg16",
        "description": "tensorflow.keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.vgg16",
        "description": "tensorflow.keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.vgg16",
        "description": "tensorflow.keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.vgg16",
        "description": "tensorflow.keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.vgg16",
        "description": "tensorflow.keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossentropy",
        "importPath": "keras.losses",
        "description": "keras.losses",
        "isExtraImport": true,
        "detail": "keras.losses",
        "documentation": {}
    },
    {
        "label": "SGD",
        "importPath": "keras.optimizers",
        "description": "keras.optimizers",
        "isExtraImport": true,
        "detail": "keras.optimizers",
        "documentation": {}
    },
    {
        "label": "SGD",
        "importPath": "keras.optimizers",
        "description": "keras.optimizers",
        "isExtraImport": true,
        "detail": "keras.optimizers",
        "documentation": {}
    },
    {
        "label": "SGD",
        "importPath": "keras.optimizers",
        "description": "keras.optimizers",
        "isExtraImport": true,
        "detail": "keras.optimizers",
        "documentation": {}
    },
    {
        "label": "SGD",
        "importPath": "keras.optimizers",
        "description": "keras.optimizers",
        "isExtraImport": true,
        "detail": "keras.optimizers",
        "documentation": {}
    },
    {
        "label": "SGD",
        "importPath": "keras.optimizers",
        "description": "keras.optimizers",
        "isExtraImport": true,
        "detail": "keras.optimizers",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "recall_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "images_path",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "images_path = {}\nimages_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Covid\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "images_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "images_path[\"NoFindings\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "images_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Pneumonia\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "images_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "images_class",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "images_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2\n}\nX = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "X = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "Y = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()\nprint(np.array(X).shape)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "x = np.array(X)\ny = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "y = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "pre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models[\"DenseNet169\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "pre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "X_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "X_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "flatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "flatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "flatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=100)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "flatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=100)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "result = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=100)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "XGB_Classifier",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "XGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=100)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "Y_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")\nresult[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "result[\"Sensitivity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "result[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "result[\"Specifity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(1)",
        "description": "DenseNet169.XGBoost.densenet169_best(1)",
        "peekOfCode": "result[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(1)",
        "documentation": {}
    },
    {
        "label": "images_path",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "images_path = {}\nimages_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Covid\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "images_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "images_path[\"NoFindings\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "images_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Pneumonia\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "images_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "images_class",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "images_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2\n}\nX = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "X = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "Y = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()\nprint(np.array(X).shape)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "x = np.array(X)\ny = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "y = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "pre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models[\"DenseNet169\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "pre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "X_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "X_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "flatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "flatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "flatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "flatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "result = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "XGB_Classifier",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "XGB_Classifier = XGBClassifier(learning_rate=0.26)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "Y_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")\nresult[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "result[\"Sensitivity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "result[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "result[\"Specifity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(2)",
        "description": "DenseNet169.XGBoost.densenet169_best(2)",
        "peekOfCode": "result[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(2)",
        "documentation": {}
    },
    {
        "label": "images_path",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "images_path = {}\nimages_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Covid\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "images_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "images_path[\"NoFindings\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "images_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Pneumonia\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "images_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "images_class",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "images_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2\n}\nX = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "X = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "Y = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()\nprint(np.array(X).shape)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "x = np.array(X)\ny = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "y = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "pre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models[\"DenseNet169\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "pre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "X_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "X_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "flatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "flatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "flatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=500)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "flatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\n# Y_pred = {}\nresult = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=500)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "result = {}\nXGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=500)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "XGB_Classifier",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "XGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=500)\nprint(f\"features shape : \", flatten_feature_train.shape)\n\"\"\"fit XGBoost classifier\"\"\"\nXGB_Classifier.fit(flatten_feature_train, Y_train)\nY_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "Y_pred = XGB_Classifier.predict(flatten_feature_test)\n\"\"\"print result\"\"\"\nresult[\"Accuracy score\"] = accuracy_score(Y_test, Y_pred)\nresult[\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred)\nresult[\"f1 score\"] = f1_score(Y_test, Y_pred, average=\"macro\")\nresult[\"precision score\"] = precision_score(Y_test, Y_pred, average=\"macro\")\nresult[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "result[\"Sensitivity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "result[\"Sensitivity\"] = result[\"confusion matrix\"][0,0] / (result[\"confusion matrix\"][0,0] + result[\"confusion matrix\"][0,1])\nresult[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "result[\"Specifity\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_best(3)",
        "description": "DenseNet169.XGBoost.densenet169_best(3)",
        "peekOfCode": "result[\"Specifity\"] = result[\"confusion matrix\"][1,1] / (result[\"confusion matrix\"][1,0] + result[\"confusion matrix\"][1,1])\nprint(f\"\\n============\")\nprint(f\"\\nAccuracy score : \", result[\"Accuracy score\"])\nprint(f\"\\nconfusion matrix : \\n\", result[\"confusion matrix\"])\nprint(f\"\\nf1 score : \", result[\"f1 score\"])\nprint(f\"\\nprecision score : \", result[\"precision score\"])\nprint(f\"\\nSpecifity : \", result[\"Specifity\"])\nprint(f\"\\nSensitivity : \", result[\"Sensitivity\"])",
        "detail": "DenseNet169.XGBoost.densenet169_best(3)",
        "documentation": {}
    },
    {
        "label": "images_path",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "images_path = {}\nimages_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "images_path[\"Covid\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "images_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "images_path[\"NoFindings\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "images_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "images_path[\"Pneumonia\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "images_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "images_class",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "images_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2\n}\nX = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "X = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "Y = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()\nprint(np.array(X).shape)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "x = np.array(X)\ny = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "y = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "pre_trained_models",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "pre_trained_models = {}\npre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "pre_trained_models[\"DenseNet169\"]",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "pre_trained_models[\"DenseNet169\"] = DenseNet169(include_top=False, input_shape=(224, 224, 3), pooling=\"avg\")\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "X_train = pre_trained_models[\"DenseNet169\"].predict(X_train)\nX_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "X_test = pre_trained_models[\"DenseNet169\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "flatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "flatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "flatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}\n# learning_reate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "flatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}\n# learning_reate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# print(learning_reate)\nfor lr in [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]:\n    print(f\"\\n=======n_estimators {lr}=====\")",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "Y_pred = {}\nresult = {}\n# learning_reate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# print(learning_reate)\nfor lr in [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]:\n    print(f\"\\n=======n_estimators {lr}=====\")\n    XGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=lr)\n    print(f\"features shape : \", flatten_feature_train.shape)\n    XGB_Classifier.fit(flatten_feature_train, Y_train)\n    Y_pred[lr] = XGB_Classifier.predict(flatten_feature_test)",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "result = {}\n# learning_reate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# print(learning_reate)\nfor lr in [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]:\n    print(f\"\\n=======n_estimators {lr}=====\")\n    XGB_Classifier = XGBClassifier(learning_rate=0.26, n_estimators=lr)\n    print(f\"features shape : \", flatten_feature_train.shape)\n    XGB_Classifier.fit(flatten_feature_train, Y_train)\n    Y_pred[lr] = XGB_Classifier.predict(flatten_feature_test)\n    result[lr] = {}",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "acc",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "acc = []\nindex = []\nfor i in [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]:\n    acc.append(result[i][\"Accuracy score\"])\nprint(acc.index(max(acc)))\nprint((max(acc)))",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "DenseNet169.XGBoost.densenet169_n_estimator",
        "description": "DenseNet169.XGBoost.densenet169_n_estimator",
        "peekOfCode": "index = []\nfor i in [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]:\n    acc.append(result[i][\"Accuracy score\"])\nprint(acc.index(max(acc)))\nprint((max(acc)))",
        "detail": "DenseNet169.XGBoost.densenet169_n_estimator",
        "documentation": {}
    },
    {
        "label": "images_path",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "images_path = {}\nimages_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Covid\"]",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "images_path[\"Covid\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.png\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpeg\")\nimages_path[\"Covid\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Covid-19/*.jpg\")\nimages_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "images_path[\"NoFindings\"]",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "images_path[\"NoFindings\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.png\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpeg\")\nimages_path[\"NoFindings\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/No_findings/*.jpg\")\nimages_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "images_path[\"Pneumonia\"]",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "images_path[\"Pneumonia\"] = glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.png\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpeg\")\nimages_path[\"Pneumonia\"] += glob(\"/content/COVID-19-master/X-Ray Image DataSet/Pneumonia/*.jpg\")\nprint(images_path[\"Covid\"])\nprint(images_path[\"NoFindings\"])\nprint(images_path[\"Pneumonia\"])\nimages_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "images_class",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "images_class = {\n    \"Covid\": 0,\n    \"Pneumonia\": 1,\n    \"NoFindings\": 2\n}\nX = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "X = []\nY = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "Y = []\nfor label in images_path:\n    for image_path in images_path[label]:\n        image = cv2.imread(image_path)\n        image = cv2.resize(image,(224, 224))\n        X.append(image)\n        Y.append(images_class[label])\nplt.imshow(X[0])\nplt.show()\nprint(np.array(X).shape)",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "x = np.array(X)\ny = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"Xception\"] = Xception(include_top=False, input_shape=(224, 224, 3))\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "y = np.array(Y)\n# initial pre trained model\npre_trained_models = {}\npre_trained_models[\"Xception\"] = Xception(include_top=False, input_shape=(224, 224, 3))\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"Xception\"].predict(X_train)",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "pre_trained_models = {}\npre_trained_models[\"Xception\"] = Xception(include_top=False, input_shape=(224, 224, 3))\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"Xception\"].predict(X_train)\nX_test = pre_trained_models[\"Xception\"].predict(X_test)\nflatten_feature_train = []",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "pre_trained_models[\"Xception\"]",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "pre_trained_models[\"Xception\"] = Xception(include_top=False, input_shape=(224, 224, 3))\nprint(np.array(x).shape)\n\"\"\"# Split train and test data\nslpit and make flatten features\n\"\"\"\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2)\nX_train = pre_trained_models[\"Xception\"].predict(X_train)\nX_test = pre_trained_models[\"Xception\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "X_train = pre_trained_models[\"Xception\"].predict(X_train)\nX_test = pre_trained_models[\"Xception\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "X_test = pre_trained_models[\"Xception\"].predict(X_test)\nflatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "flatten_feature_train = []\nfor item in X_train:\n    flatten_feature_train.append(item.flatten())\nflatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_train",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "flatten_feature_train = np.array(flatten_feature_train)\nflatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "flatten_feature_test = []\nfor item in X_test:\n    flatten_feature_test.append(item.flatten())\nflatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}\nlearning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "flatten_feature_test",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "flatten_feature_test = np.array(flatten_feature_test)\n\"\"\"# Classification\ninitial XGBoost classifier\n\"\"\"\nY_pred = {}\nresult = {}\nlearning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nfor lr in learning_rates:\n    XGB_Classifier = XGBClassifier(learning_rate=lr)\n    print(f\"\\n==== learning rate : {lr} ========\")",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "Y_pred = {}\nresult = {}\nlearning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nfor lr in learning_rates:\n    XGB_Classifier = XGBClassifier(learning_rate=lr)\n    print(f\"\\n==== learning rate : {lr} ========\")\n    print(f\"features shape : \", flatten_feature_train.shape)\n    XGB_Classifier.fit(flatten_feature_train, Y_train)\n    Y_pred[lr] = XGB_Classifier.predict(flatten_feature_test)\n    result[lr] = {}",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "result = {}\nlearning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nfor lr in learning_rates:\n    XGB_Classifier = XGBClassifier(learning_rate=lr)\n    print(f\"\\n==== learning rate : {lr} ========\")\n    print(f\"features shape : \", flatten_feature_train.shape)\n    XGB_Classifier.fit(flatten_feature_train, Y_train)\n    Y_pred[lr] = XGB_Classifier.predict(flatten_feature_test)\n    result[lr] = {}\n    result[lr][\"Accuracy score\"] = accuracy_score(Y_test, Y_pred[lr])",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    },
    {
        "label": "learning_rates",
        "kind": 5,
        "importPath": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "description": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "peekOfCode": "learning_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nfor lr in learning_rates:\n    XGB_Classifier = XGBClassifier(learning_rate=lr)\n    print(f\"\\n==== learning rate : {lr} ========\")\n    print(f\"features shape : \", flatten_feature_train.shape)\n    XGB_Classifier.fit(flatten_feature_train, Y_train)\n    Y_pred[lr] = XGB_Classifier.predict(flatten_feature_test)\n    result[lr] = {}\n    result[lr][\"Accuracy score\"] = accuracy_score(Y_test, Y_pred[lr])\n    result[lr][\"confusion matrix\"] = confusion_matrix(Y_test, Y_pred[lr])",
        "detail": "Xception.XGBoost.xception_learning_rate(0.1....0.9)",
        "documentation": {}
    }
]